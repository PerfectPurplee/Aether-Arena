//package sharedObjects;
//
//
//import java.io.Serial;
//import java.io.Serializable;
//import java.util.ArrayList;
//import java.util.List;
//
//import static main.EnumContainer.*;
//
//
//public class Spell01 implements Serializable {
//
////    @Serial
////    private static final long serialVersionUID = 1L;
//
//    private final int NUMBER_OF_SPRITES = 4;
//    private final int SPEED = 2;
//    //  object starting position on screen. Character pos + (vector * int)
//    public float spellPosXWorld, spellPosYWorld;
//    public float normalizedVectorX;
//    public float normalizedVectorY;
//    public int mousePosXWorld, mousePosYWorld;
//
//    private final float playerPosXWorlInMomentOfSpellCreation;
//    private final float playerPosYWorldInMomentOfSpellCreation;
//
//    public static List<Spell01> listOfActiveSpell01s = new ArrayList<>();
//
//    public Spell01(float playerPosXWorlInMomentOfSpellCreation, float playerPosYWorldInMomentOfSpellCreation) {
//        this.playerPosXWorlInMomentOfSpellCreation = playerPosXWorlInMomentOfSpellCreation;
//        this.playerPosYWorldInMomentOfSpellCreation = playerPosYWorldInMomentOfSpellCreation;
//        getVector();
//        spellPosXWorld = (playerPosXWorlInMomentOfSpellCreation + 62) + (normalizedVectorX * 150);
//        spellPosYWorld = (playerPosYWorldInMomentOfSpellCreation + 62) + (normalizedVectorY * 150);
//
//
//        synchronized (listOfActiveSpell01s) {
//            listOfActiveSpell01s.add(this);
//        }
//    }
//
//
//    private void getVector() {
//        mousePosXWorld = (int) (ServerClientConnectionCopyObjects.currentMousePosition.getX());
//        mousePosYWorld = (int) (ServerClientConnectionCopyObjects.currentMousePosition.getY());
//        float vectorX = (float) (mousePosXWorld - (playerPosXWorlInMomentOfSpellCreation + 72));
//        float vectorY = (float) (mousePosYWorld - (playerPosYWorldInMomentOfSpellCreation + 72));
//        float magnitude = (float) Math.sqrt(vectorX * vectorX + vectorY * vectorY);
//        normalizedVectorX = (vectorX / magnitude);
//        normalizedVectorY = (vectorY / magnitude);
//    }
//
//    private void spellPositionUpdate() {
//        spellPosXWorld += (normalizedVectorX * SPEED);
//        spellPosYWorld += (normalizedVectorY * SPEED);
//    }
//
//    public static void updateAllSpells01() {
//        synchronized (listOfActiveSpell01s) {
//            listOfActiveSpell01s.forEach(spell01 -> {
//                spell01.spellPositionUpdate();
//            });
//        }
//    }
//}